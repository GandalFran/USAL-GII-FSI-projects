
(load "load.lsp")
(setf loglevel "debug")

(defun test_unification (test_name first_var second_var expected) 
	(logging loglevel "+" t "TEST:unification_test.lsp: ~S :(unification ~S ~S) (expected: ~S)" test_name first_var second_var expected)
	(setf result (unification first_var second_var))
	(setf result_equal (is_equal result expected))
	(logging loglevel "-" t "TEST:unification_test.lsp: ~S[~S]: (unification ~S ~S) = ~S (expected: ~S)" test_name result_equal first_var second_var result expected)
	(setf loglevel "error")
	(setf s (sustitution (sustitution first_var result) result) )
	(logging loglevel NIL t "TEST:unification_test.lsp: ~S[~S]: (sustitution ~S ~S) = ~S (expected: ~S)" test_name result_equal first_var result s second_var)
)

(format t "~%TEST:unification_test.lsp: TESTS OF UNIFICATION")
(test_unification "test 0" '(F (? X) (G (? X) )) '(F A (G A)) '(A (? X)) )
;(test_unification "test 1" '((? X) A) '((F H) (? Y)) '(((F H) (? X)) (A (? Y))) )
;(test_unification "test 2" '((? X) (G (? X))) '(A (G A)) '(A (? X)) )
;(test_unification "test 3" '((? X) (? Y) (? X))  '(R (G(? X)) P)  NIL )
;(test_unification "test 4"  '(P (? x) A) '(P (f h) (? y)) '(((F H) (? X)) (A (? Y))))
;(test_unification "test 5"  '(PERSONA (? x)) '(PERSONA ADOLFO) '(ADOLFO (? X)) )
; ERROR -> (test_unification "test 6"  '( PARENTS (? x) (FATHER (? x)) (MOTHER BILL) ) '( PARENTS BILL (FATHER BILL) (? y) ) ' ( (BILL (? x)) ((MOTHER BILL) (? Y)) ) )
;(test_unification "test 7"  '( (FOO (? x)) (? y) ) '( A B ) 'UNIFICATION_ERROR)
;(test_unification "test 8"  '( (? y) (? y) ) '( A (? y) ) '(A (? Y)) )
;(test_unification "test 9"  '(P a) '(P (? b)) '(A (? B))  )
;(test_unification "test 10" '(P (? x) B) '(P A (? y)) '((A (? X)) (B (? Y))) )
;(test_unification "test 11" '((? x) B) '(A (? y)) '((A (? X)) (B (? Y))) )
;(test_unification "test 12" '((? x) B (? x) A) '(A (? y) (? x) A) '( (A (? X)) (B (? Y))) )
;(test_unification "test 13" '(P M (? x) B) '(P M  A (? y)) '( (A (? X)) (B (? Y)) ) )
;ERROR (test_unification "test 14" '(P (? x) B (? c)) '(P A (? y) (f A)) '((A (? X)) (B (? Y)) ((F A) (? C))) )
;ERROR (test_unification "test 15" '(P (? x) B (? c)) '(P A (? y) (f A B)) '( (A (? X)) (B (? Y)) ((F A B) (? C)))  )
;ERROR (test_unification "test 16" '(P (? x) B (? c)) '(P A (? y) (f A B)) '( (A (? X)) (B (? Y)) ((F A B) (? C))) )
;(test_unification "test 17" '( (? x) (? z) (? y) ) '( (? y) (? x) (? b) ) '( ((? B) (? X)) ((? B) (? Z)) ((? B) (? Y))) )
;(test_unification "test 18" '(P C B A) '(B D C C) 'UNIFICATION_ERROR )
;(test_unification "test 19" '(P (? x) A) '(D (f h) (? y)) 'UNIFICATION_ERROR )
;(test_unification "test 20" '(P (? x) A) '(D (f h) (? y)) 'UNIFICATION_ERROR )