(defun multiple_sustitution (listaACambiar listaCambios)
    (prog (result)
        (setf result listaACambiar)
        (dolist (cambio listaCambios) 
            (when (eq debug T) (format t "~%       DEBUG:sustitution.lsp:multiple_sustitution: applying sustitution [ ~S ] to [ ~S ]" cambio result)) 
            (setf result (sustitution listaACambiar cambio))
            (when (eq debug T) (format t "~%       DEBUG:sustitution.lsp:multiple_sustitution: sustitution [ ~S ] result [ ~S ]" cambio result))
        )
        (return-from multiple_sustitution result)
    )
)

(defun sustitution (listaACambiar cambio)
    (when (eq debug T) (format t "~%       DEBUG:sustitution.lsp:sustitution: listaACambiar [ ~S ]  cambio [ ~S ]" listaACambiar cambio)) 
    (prog (listaACambiar_editable cambio_editable)
        (setf cambio_editable (copy-tree cambio))
        (setf listaACambiar_editable (copy-tree listaACambiar))
        (cond
            ((is_atom listaACambiar_editable)
                (when (eq debug T) (format t "~%       DEBUG:sustitution.lsp:sustitution: listaACambiar is atom -> return NIL")) 
                (return-from sustitution NIL)
            )
            (T
                (dolist (var listaACambiar_editable)
                    (setf tempList (list var))
                    (when (listp var)
                        (sustitution var cambio_editable)
                    )
                    (when (equal tempList (rest cambio_editable))
                        (setf tempVar (getPosition var listaACambiar_editable))
                        (setf (nth tempVar listaACambiar_editable) (first cambio_editable))
                    )
                )
                (when (eq debug T) (format t "~%       DEBUG:sustitution.lsp:sustitution: listaACambiar [ ~S ]  -> listaACambiar editada [ ~S ]" listaACambiar listaACambiar_editable)) 
                (return-from sustitution listaACambiar_editable)
            )
        )
    )
)

(defun getPosition(element list &optional(n 0))
    (cond
        ((null list) list)
        ((equal (car list) element) n)
        (t (getPosition element (cdr list) (+ n 1)))
    )
)
